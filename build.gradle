buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'org.springframework.boot' version '2.6.5'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

group = 'com.ezenac'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security:2.6.5'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf:2.6.5'
    implementation 'org.springframework.boot:spring-boot-starter-validation:2.6.5'
    implementation 'org.springframework.boot:spring-boot-starter-web:2.6.5'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5:3.0.4.RELEASE'
    implementation 'net.nurigo:sdk:4.1.3'
    implementation 'com.squareup.okhttp3:okhttp:4.9.3'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis:2.6.5'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client:2.6.5'
    implementation 'org.modelmapper:modelmapper:3.0.0'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor:2.6.5'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client:3.0.3'
    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.6.5'
    testImplementation 'org.springframework.security:spring-security-test:5.6.2'

    // QueryDSL

    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    annotationProcessor(
            "javax.persistence:javax.persistence-api",
            "javax.annotation:javax.annotation-api",
            "com.querydsl:querydsl-apt:${queryDslVersion}:jpa")
}

def generated='src/main/generated'
sourceSets {
    main.java.srcDirs += [ generated ]
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(generated)
}

clean.doLast {
    file(generated).deleteDir()
}

tasks.withType(JavaCompile){
    options.encoding = 'UTF-8'
}

tasks.named('test') {
    useJUnitPlatform()
}